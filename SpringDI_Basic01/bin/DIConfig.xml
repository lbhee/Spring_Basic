<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--  
	Spring 자신만의 [컨테이너(Spring 전용 메모리 공간)] 제공 (IOC) 안에 
	[객체를 만들고 조립(관계...의존성)] 설정
	
	>>DIConfig.xml 문서를  read 해서 ....안에 있는 코드 먼저 실행
	>>xml 파일 은 컨테이너를 구성하는 [객체를 생성]하고 [의존]을 설정하는 파일
	또는  Annotation 통해서 컨테이너 자원 구성
	
	:제어의 역전 (프로그램의 제어구조를 바꾼다)
	:작은 단위의 부품을 만들어 놓고 그 것을 조립하는 행위 (레고 블럭 처럼) 
	
	
	
	* 자바코드의 메인함수에서 개발자가 객체를 생성하고 주입하는 코드(DI)*
	NewRecordView view = new NewRecordView(); 
	NewRecord record = new NewRecord();
		
	view.setRecord(record); 
	
	위와 같은 코드를 자바코드가 아닌 설정을 통해서 구현하는 것이 스프링이다!(xml 또는 Annotation)
	
-->
<bean class="Spring_DI4.NewRecord" id="record"></bean> 
<!-- 객체생성 (자바: NewRecord record = new NewRecord(); ) -->

<bean class="Spring_DI4.NewRecordView" id="view">
<!-- 객체생성 (자바: NewRecordView view = new NewRecordView();  ) -->

	<property name="record" ref="record"></property>  <!-- 자동으로 setter동작 -->
	<!-- 
		property는 setter
		- name은 setter함수를 구현하고 있는 멤버필드명을 쓰면된다! 	
		
			public void setRecord(Record record) { //파라메터로 다형성으로 유연하게 들어올 수 있다. 인터페이스 타입 
				this.record = (NewRecord)record; //다운케스팅
			}
		
		- ref는 주입하려는 주소값(id값)
	-->
	
</bean> 


</beans>